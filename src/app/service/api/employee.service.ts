/**
 * Team Investment Tool
 * Team Investment Tool
 *
 * OpenAPI spec version: 1.0.0
 * Contact: admin@example.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { BASE_PATH} from '../variables';
import { Configuration} from '../configuration';
import { IEmployee} from '../../model/IEmployee';
import { Observable} from 'rxjs';
import { IEmployeeComment} from '../../model/IEmployeeComment';
import { Cookie} from '../../enumeration/cookie.enum';
import { LocalService} from '../cookie/local.service';


@Injectable()
export class EmployeeService {

    protected basePath = 'http://127.0.0.1:8080/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, private local: LocalService, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add a new Employee to the Company
     * 
     * @param body Employee object that needs to be added to the Company
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addEmployee(body: IEmployee, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addEmployee(body: IEmployee, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addEmployee(body: IEmployee, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addEmployee(body: IEmployee, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addEmployee.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

        let headers = this.defaultHeaders;

        // authentication (APIKeyQueryParam) required
        queryParameters = queryParameters.set('api_key', this.local.get(Cookie.TOKEN));

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/employee`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a new Comment to a Employee
     * 
     * @param body Comment that needs to be added to a Employee
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addEmployeeComment(body: IEmployeeComment, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addEmployeeComment(body: IEmployeeComment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addEmployeeComment(body: IEmployeeComment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addEmployeeComment(body: IEmployeeComment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addEmployeeComment.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        headers = headers.set('X-API-Key', this.local.get(Cookie.TOKEN));

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/employee/comment`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a Employee
     * 
     * @param employeeId Employee id to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteEmployee(employeeId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteEmployee(employeeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteEmployee(employeeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteEmployee(employeeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling deleteEmployee.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        headers = headers.set('X-API-Key', this.local.get(Cookie.TOKEN));

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/employee/${encodeURIComponent(String(employeeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds Employee by Nickname
     * Multiple Nicknames values can be provided with comma separated strings
     * @param nickname Nicknames values that need to be considered for filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findEmployeesByNickname(nickname: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Array<IEmployee>>;
    public findEmployeesByNickname(nickname: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IEmployee>>>;
    public findEmployeesByNickname(nickname: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IEmployee>>>;
    public findEmployeesByNickname(nickname: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nickname === null || nickname === undefined) {
            throw new Error('Required parameter nickname was null or undefined when calling findEmployeesByNickname.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nickname) {
            nickname.forEach((element) => {
                queryParameters = queryParameters.append('nickname', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        headers = headers.set('X-API-Key', this.local.get(Cookie.TOKEN));

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<IEmployee>>(`${this.basePath}/employee/findByNickname`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find All Comments By Employee ID
     * Returns all Comments for a Employee
     * @param employeeId ID of Employee which Comments to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllCommentsByEmployeeId(employeeId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<IEmployeeComment>>;
    public getAllCommentsByEmployeeId(employeeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IEmployeeComment>>>;
    public getAllCommentsByEmployeeId(employeeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IEmployeeComment>>>;
    public getAllCommentsByEmployeeId(employeeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling getAllCommentsByEmployeeId.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        headers = headers.set('X-API-Key', this.local.get(Cookie.TOKEN));

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<IEmployeeComment>>(`${this.basePath}/employee/${encodeURIComponent(String(employeeId))}/comments`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Employee by ID
     * Returns a single Employee
     * @param employeeId ID of Employee to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEmployeeById(employeeId: number, observe?: 'body', reportProgress?: boolean): Observable<IEmployee>;
    public getEmployeeById(employeeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IEmployee>>;
    public getEmployeeById(employeeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IEmployee>>;
    public getEmployeeById(employeeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling getEmployeeById.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        headers = headers.set('X-API-Key', this.local.get(Cookie.TOKEN));

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<IEmployee>(`${this.basePath}/employee/${encodeURIComponent(String(employeeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an existing Employee
     * 
     * @param body Employee object that needs to be added to the company
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateEmployee(body: IEmployee, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateEmployee(body: IEmployee, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateEmployee(body: IEmployee, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateEmployee(body: IEmployee, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateEmployee.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        headers = headers.set('X-API-Key', this.local.get(Cookie.TOKEN));

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/employee`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a Employee in the Company with form data
     * 
     * @param employeeId ID of Employee that needs to be updated
     * @param firstname Updated firstname of the Employee
     * @param lastname Updated lastname of the Employee
     * @param nickname Updated nickname of the Employee
     * @param isAdmin Changes the Admin status of a Employee
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateEmployeeWithForm(employeeId: number, firstname?: string, lastname?: string, nickname?: string, isAdmin?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateEmployeeWithForm(employeeId: number, firstname?: string, lastname?: string, nickname?: string, isAdmin?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateEmployeeWithForm(employeeId: number, firstname?: string, lastname?: string, nickname?: string, isAdmin?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateEmployeeWithForm(employeeId: number, firstname?: string, lastname?: string, nickname?: string, isAdmin?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (employeeId === null || employeeId === undefined) {
            throw new Error('Required parameter employeeId was null or undefined when calling updateEmployeeWithForm.');
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        headers = headers.set('X-API-Key', this.local.get(Cookie.TOKEN));

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        return this.httpClient.post<any>(`${this.basePath}/employee/${encodeURIComponent(String(employeeId))}`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
